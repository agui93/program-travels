##############################################################################
#  外部Service的用例: ExternalName
##############################################################################
#  kubectl apply -f external_service_by_externalname.yaml
#  kubectl get -f external_service_by_externalname.yaml
#  kubectl get all -n externalname-apps -o wide
#  kubectl delete -f external_service_by_externalname.yaml
#  kubectl exec -it test-pod -n externalname-apps -- /bin/bash
#    验证, 进入容器内后: 
#       使用 ping 命令来检查与外部数据库主机的网络连通性: ping <EXTERNAL_DATABASE_HOSTNAME>
#       使用 nc 命令来尝试建立 TCP 连接到外部数据库主机和端口: nc -vz <EXTERNAL_DATABASE_HOSTNAME> <DATABASE_PORT>
#       使用 nslookup命令查询别名: nslookup -type=cname harbor 或者 nslookup -type=cname harbor.externalname-apps.svc.cluster.local
#       使用 dig命令查询dns: dig harbor.externalname-apps.svc.cluster.local
#    其中,优先使用k8s集群内的DNS, 然后宿主机的DNS(core-dns: coredns-config.yaml forward功能起作用)
#       当宿主机的DNS未合理设置时, 无法ping通 k8strials.harbor.com
##############################################################################
---
apiVersion: v1
kind: Namespace
metadata:
  name: externalname-apps
---
apiVersion: v1
kind: Service
metadata:
  name: harbor
  namespace: externalname-apps
spec:
  type: ExternalName
  externalName: k8strials.harbor.com
---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: externalname-apps
spec:
  containers:
    - name: test-pod
      image: k8strials.harbor.com/library/ubuntu-net-base:01
      imagePullPolicy: IfNotPresent
      command: ["sh", "-c", "while true; do sleep 3600; done"]
---



